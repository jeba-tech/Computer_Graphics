



////////////////////slow the object speed



#include<cstdio>

#include <GL/gl.h>
#include <GL/glut.h>


GLfloat position = 0.0f;
GLfloat position1 = 0.0f;

GLfloat speed = 0.1f;
void dis();
void display();

void update(int value) {

    if(position <-1.0)
        position = 1.0f;

    position -= speed;

	glutPostRedisplay();


	glutTimerFunc(100,update,0);
}


void update1(int value) {

    if(position1 >1.0)
        position1 = -1.0f;

    position1 += speed;

	glutPostRedisplay();


	glutTimerFunc(100,update1,0);
}


void init() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

void disback(int val)
{
    glutDisplayFunc(display);
}

void display7()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glPushMatrix();
glTranslatef(0.0f,position, 0.0f);

    glBegin(GL_QUADS);            // These vertices form a closed polygon
	glColor3ub(248, 0, 255  );//pink
	glVertex2f(-0.5f, 0.1f);
	glVertex2f(0.0f, 0.1f);
	glVertex2f(-0.1f, 0.5f);
    glVertex2f(-0.4f, 0.5f);
    glEnd();
   glPopMatrix();
   glutTimerFunc(1500,disback,0);
   glFlush();
}

void display6(int val) {

 glutDisplayFunc(display7);


}

void display5()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glPushMatrix();
glTranslatef(0.0f,position, 0.0f);
     glBegin(GL_QUADS);            // These vertices form a closed polygon
	glColor3ub(0, 245, 255 );//skyblue
	glVertex2f(0.2f, 0.2f);
	glVertex2f(0.4f, -0.2f);
	glVertex2f(0.6f, 0.2f);
    glVertex2f(0.4f, 0.6f);
    glEnd();
   glPopMatrix();
   glutTimerFunc(1500,display6,0);
   glFlush();

}

void display4(int val) {

 glutDisplayFunc(display5);


}

void display3()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glPushMatrix();
glTranslatef(position1,0.0f, 0.0f);
   glBegin(GL_QUADS);
      glColor3f(0.0f, 1.0f, 0.0f);//green
      glVertex2f(-0.2f, -0.2f);
      glVertex2f( 0.2f, -0.2f);
      glVertex2f( 0.2f,  0.2f);
      glVertex2f(-0.2f,  0.2f);
   glEnd();
   glPopMatrix();
   glutTimerFunc(1500,display4,0);
   glFlush();
}

void display2(int val) {

 glutDisplayFunc(display3);


}
void display() {
   glClear(GL_COLOR_BUFFER_BIT);
   glLoadIdentity();
glPushMatrix();
glTranslatef(position,0.0f, 0.0f);

   glBegin(GL_TRIANGLES);
   glColor3ub(255, 243, 0 );//yellow
   glVertex2f(0.4f,-0.4f);
   glVertex2f(0.7f, 0.0f);
   glVertex2f(0.4f, 0.4f);
   glEnd();

glPopMatrix();

glutTimerFunc(1500,display2,0);
glFlush();

}

void dis()
{
       glutDisplayFunc(display);
}



void handleMouse(int button, int state, int x, int y) {
	if (button == GLUT_LEFT_BUTTON)
	{	speed += 0.1f;
			}
if (button == GLUT_RIGHT_BUTTON)
	{speed -= 0.1f;   }
glutPostRedisplay();}


void handleKeypress(unsigned char key, int x, int y) {
	switch (key) {
case 'a':
    speed = 0.0f;
    break;
case 'w':
    speed = 0.1f;
    break;
glutPostRedisplay();
	}
	}




int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitWindowSize(320, 320);
   glutInitWindowPosition(50, 50);
   glutCreateWindow("Translation Animation");
   glutDisplayFunc(dis);
   init();
   glutMouseFunc(handleMouse);
   glutKeyboardFunc(handleKeypress);

   glutTimerFunc(100, update, 0);
     glutTimerFunc(100, update1, 0);

   glutMainLoop();
   return 0;
}
















