//CG_Lab_Assesment


#include <windows.h>  // for MS Windows
#include <GL/glut.h>  // GLUT, include glu.h and gl.h


/* Initialize OpenGL Graphics */
void initGL() {
	// Set "clearing" or background color
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // Black and opaque
}


void parallelogram()
{
     glLineWidth(7);
    glBegin(GL_LINES);            // These vertices form a closed polygon
	glColor3ub(0, 0, 0);
	glVertex2f(-0.5f, 0.7f);
	glVertex2f(-0.7f, -0.7f);
	glVertex2f(-0.7f, -0.7f);
	glVertex2f(0.4f, -0.7f);
	glVertex2f(0.4f, -0.7f);
    glVertex2f(0.5f, 0.7f);
    glVertex2f(0.5f, 0.7f);
    glVertex2f(-0.5f, 0.7f);
    glEnd();


}

void diamond()
{
    glBegin(GL_QUADS);            // These vertices form a closed polygon
	glColor3ub(65, 212, 59 );
	glVertex2f(0.2f, 0.2f);
	glVertex2f(0.3f, 0.1f);
	glVertex2f(0.4f, 0.2f);
    glVertex2f(0.3f, 0.3f);
    glEnd();

}
void trapezoid()
{
    glBegin(GL_QUADS);            // These vertices form a closed polygon
	glColor3ub(233, 255, 0  );
	glVertex2f(-0.4f, 0.1f);
	glVertex2f(-0.1f, 0.1f);
	glVertex2f(-0.2f, 0.3f);
    glVertex2f(-0.3f, 0.3f);
    glEnd();

}
void box()
{
    glBegin(GL_QUADS);            // These vertices form a closed polygon
	glColor3ub(182, 122, 24 );
	glVertex2f(-0.4f, -0.1f);
	glVertex2f(-0.4f, -0.3f);
	glVertex2f(-0.2f, -0.3f);
    glVertex2f(-0.2f, -0.1f);
    glEnd();

}
void triangle()
{
    glBegin(GL_TRIANGLES);            // These vertices form a closed polygon
	glColor3ub(255, 19, 0 );
	glVertex2f(0.1f, -0.1f);
	glVertex2f(0.1f, -0.3f);
	glVertex2f(0.4f, -0.2f);

    glEnd();

}

void t_shape()
{
    glLineWidth(6);
	// Draw a Red 1x1 Square centered at origin
	glBegin(GL_LINES); // Each set of 4 vertices form a quad
	glColor3ub(0, 0, 0  );
    glVertex2f(0.15f, -0.13f);
    glVertex2f(0.15f, -0.27f);
    glVertex2f(0.15f, -0.2f);
    glVertex2f(0.3f, -0.2f);

    glEnd();

}
/* Handler for window-repaint event. Call back when the window first appears and
whenever the window needs to be re-painted. */
void display() {

	glClear(GL_COLOR_BUFFER_BIT);   // Clear the color buffer with current clearing color
    diamond();
    trapezoid();
    triangle();
     box();
     t_shape();
    parallelogram();
	glFlush();  // Render now
}
/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {
	glutInit(&argc, argv);          // Initialize GLUT
	glutCreateWindow("Vertex, Primitive & Color");  // Create window with the given title
	glutInitWindowSize(320, 320);   // Set the window's initial width & height
	glutDisplayFunc(display);       // Register callback handler for window re-paint event
	initGL();                       // Our own OpenGL initialization
	glutMainLoop();                 // Enter the event-processing loop
	return 0;
}





